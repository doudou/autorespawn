#! /usr/bin/env ruby

name = ENV['TEST_NAME']
level = Integer(ENV['TEST_LEVEL'] ||= '0')
level += 1
ENV['TEST_LEVEL'] = level.to_s
STDOUT.sync = true

begin
    require 'simplecov'
    require 'coveralls'
    SimpleCov.formatter = SimpleCov::Formatter::MultiFormatter[
        SimpleCov::Formatter::HTMLFormatter,
        Coveralls::SimpleCov::Formatter
    ]
    SimpleCov.start do
        command_name "#{name}-#{level}"
        add_filter "/test/"
    end
rescue LoadError
end


require 'autorespawn'
require 'optparse'

exit_level = nil
parser = OptionParser.new do |opt|
    opt.on '--exit-level=LEVEL', Integer do |l|
        exit_level = l
    end
end
parser.parse(ARGV)

spawner = Autorespawn.new
spawner.require ENV['TEST_REQUIRE']

# The throw/catch here is a trick to make sure we get the code coverage output
# at the end of the program. Otherwise, using e.g. exit or interrupt we don't
spawner.at_respawn { SimpleCov.result.format! }
spawner.run do
    STDOUT.puts Process.pid
    STDOUT.flush
    if exit_level && exit_level == level
        SimpleCov.result.format!
        exit 0
    end
end
